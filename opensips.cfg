  # --------------------------------------------------------------------
  # ----------- global configuration parameters ------------------------
  # --------------------------------------------------------------------

debug=0
memlog=0
log_stderror=no
log_facility=LOG_LOCAL0

check_via=no	# (cmd. line: -v)
dns=no           # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)
fork=yes
children=4

disable_dns_blacklist=yes
disable_core_dump=yes

mhomed=0

# Default SIP port
listen=ext.ip:5060

# HTTP port
listen=ext.ip:80

# TLS port
disable_tls = 1
listen = tls:ext.ip:5061
tls_verify_server = 1
tls_verify_client = 1
tls_require_client_certificate = 0
tls_method = TLSv1
tls_certificate = "/etc/opensips/tls/domain.crt"
tls_private_key = "/etc/opensips/tls/domain.key"
tls_ca_list = "/etc/opensips/tls/ca-bundle.crt"

####### Modules Section ########

#set module path
mpath="/usr/lib64/opensips/modules"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
# maximum allowed INVITE time
modparam("tm", "fr_inv_timer", 105)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

loadmodule "pike.so"

loadmodule "dialog.so"

loadmodule "nat_traversal.so"
modparam("nat_traversal", "keepalive_method", "INFO")
modparam("nat_traversal", "keepalive_from", "sip:pinger@example.net")
modparam("nat_traversal", "keepalive_state_file", "/tmp/opensips_keepalive_state")

####### Routing Logic ########

# main request routing logic

route{
	if (!pike_check_req()){
		xlog("L_ERR","OVERLOAD: s[$proto:$si:$sp]\n");
		exit;
	};

	# reply exactly to port from where message was received
	force_rport();

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}
	if (msg:len >= 2048 ) {
		sl_send_reply("513", "Message too big");
		return;
	};

	# catch all replies
	t_on_reply("1");

	# catch all failure replies
	t_on_failure("1");

	xlog("L_ERR","BEGIN: [$rm] ru[$ru] fu[$fu] tu[$tu] s[$proto:$si:$sp] CID[$ci][TIME:$time(%H:%M:%S).$Tsm] MSG[\n$mb\n]\n");

	if(method=="INVITE"){
		# suppress accidental resends of this INVITE
		sl_send_reply("100", "Trying...");
	}

	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(1);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after
					# a 487 or e.g. 404 from upstream server
					route(1);
				}
			}
			else
				sl_send_reply("404","Not here");
		}
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")){
		if (t_check_trans())
			route(1);
	}

	t_check_trans();

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	record_route();

	route(1);
}


route[1] {
	if(($si == "backend.ip")&&($sp == "backend.port")){
		if (!t_relay("0x01")) {
			xlog("L_ERR","ROUTE FROM BACKEND: FAIL [$rm] ru[$ru] fu[$fu] tu[$tu] s[$proto:$si:$sp] CID[$ci][TIME:$time(%H:%M:%S).$Tsm]\n");
			sl_reply_error();
		}
		else
			xlog("L_ERR","ROUTE FROM BACKEND: [$rm] ru[$ru] fu[$fu] tu[$tu] s[$proto:$si:$sp] CID[$ci][TIME:$time(%H:%M:%S).$Tsm]\n");
	}
	else{
		if ((method=="REGISTER" || method=="SUBSCRIBE" || (method=="INVITE" && !has_totag())) && client_nat_test("15")){
			nat_keepalive();
			fix_contact();
		}
		if (!t_relay("udp:backend.ip:backend.port", "0x01")) {
			xlog("L_ERR","ROUTE TO BACKEND: FAIL [$rm] ru[$ru] fu[$fu] tu[$tu] s[$proto:$si:$sp] CID[$ci][TIME:$time(%H:%M:%S).$Tsm]\n");
			sl_reply_error();
		}
		else
			xlog("L_ERR","ROUTE TO BACKEND: [$rm] ru[$ru] fu[$fu] tu[$tu] s[$proto:$si:$sp] CID[$ci][TIME:$time(%H:%M:%S).$Tsm]\n");
	}
	exit;
}

onreply_route[1] {
	if(($si == "backend.ip")&&($sp == "backend.port")){
		xlog("L_ERR","REPLY FROM BACKEND: [$rm][$rs] $ruri $fu to $tu {si[$si:$sp]} CID[$ci][TIME:$time(%H:%M:%S).$Tsm] MSG[\n$mb]\n");
	}
	else{
		if(client_nat_test("15")){
			fix_contact();
		}
		xlog("L_ERR","REPLY TO BACKEND: [$rm][$rs] $ruri $fu to $tu {si[$si:$sp]} CID[$ci][TIME:$time(%H:%M:%S).$Tsm] MSG[\n$mb]\n");
	}
}

failure_route[1] {
	xlog("L_ERR","FAILURE: [$rm][$rs] $ruri $fu to $tu {si[$si:$sp]} CID[$ci][TIME:$time(%H:%M:%S).$Tsm] MSG[\n$mb]\n");

	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}
}

error_route {
	xlog("L_ERR", "--- error route class=$(err.class) level=$(err.level) info=$(err.info) rcode=$(err.rcode) rreason=$(err.rreason) ---\n");
	xlog("L_ERR", "--- error from [$si:$sp]\n+++++\n$mb\n++++\n");
	sl_send_reply("$err.rcode", "$err.rreason");
	exit;
}
